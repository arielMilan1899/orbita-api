"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import datetime
import os
import cloudinary

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from corsheaders.defaults import default_headers

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'l!n%o=ejl^1rs&y4h13-h!h%f@2_j6ey$ncvxxz6u!=!$bv=k*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'False') != 'False'

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.staticfiles',
    'graphene_django',
    'corsheaders',
    'accounts',
    'offers',
    'contact_info',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'accounts.middleware.JWTAuthenticationMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = list(default_headers) + [
    'app-version',
]

ROOT_URLCONF = 'api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api.wsgi.application'

# custom user model
AUTH_USER_MODEL = 'accounts.User'

JWT_AUTH_HEADER_PREFIX = 'JWT'
JWT_EXPIRATION_DELTA = datetime.timedelta(days=30)  # Monthly expiration.

AUTHENTICATION_BACKENDS = ['accounts.backends.EmailBackend']

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('DB_NAME', 'orbita'),
        'USER': os.environ.get('DB_USER', 'orbita'),
        'PASSWORD': os.environ.get('DB_PASSWORD', '123123'),
        'HOST': os.environ.get('DB_HOST', '127.0.0.1'),
        'PORT': os.environ.get('DB_PORT', '3306'),
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 6,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Redis
REDIS_HOST = 'redis'
REDIS_PORT = '6379'
REDIS_PASSWORD = ''

# Cache backend
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': "redis://{host}:{port}".format(host=REDIS_HOST, port=REDIS_PORT),
        'OPTIONS': {
            "CLIENT_CLASS": "django_redis.client.DefaultClient"
        },
        "TIMEOUT": None  # cache keys never expire
    }
}

# ignore redis exception and log them all.
DJANGO_REDIS_IGNORE_EXCEPTIONS = True
DJANGO_REDIS_LOG_IGNORED_EXCEPTIONS = True

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Havana'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

# Graphene settings
GRAPHENE = {
    'SCHEMA': 'api.root_schema.SCHEMA',  # Where your Graphene schema lives
    'SCHEMA_OUTPUT': 'data/schema.json',
    'MIDDLEWARE': [
        'graphene_django.debug.DjangoDebugMiddleware',
    ]
}

DJANGO_REDIS_LOGGER = 'redis'

# Console Logging
LOG_LEVEL = os.environ.get('LOG_LEVEL', 'INFO')
LOGGING = {
    'version': 1,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[%(server_time)s] %(message)s',
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler'
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
    },
    'loggers': {
        'api': {
            'handlers': ['console'],
            'level': LOG_LEVEL,
        },
        'django': {
            'handlers': ['console'],
            'level': LOG_LEVEL,
        },
        'graphql': {
            'handlers': ['console'],
            'level': LOG_LEVEL,
        },
        'django.server': {
            'handlers': ['django.server'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        'redis': {
            'handlers': ['console'],
            'level': LOG_LEVEL,
        },
    }
}

# DEBUG config
if DEBUG:  # pragma: no cover
    TEMPLATES[0]['DIRS'] = [os.path.join(BASE_DIR, 'api/templates')]
    ROOT_URLCONF = 'api.urls_dev'

OFFER_SHORT_DESCRIPTION_MAX_LENGTH = 100
OFFER_FILTER_RESULT_COUNT = 100

cloudinary.config(
    cloud_name=os.environ.get('CLOUD_NAME', 'orbita'),
    api_key=os.environ.get('CLOUD_API_KEY', '566843397419569'),
    api_secret=os.environ.get('CLOUD_API_SECRET', '9ZJPA-QVSWNIA9mtkYdhsoR5KAk'),
    upload_preset=os.environ.get('CLOUD_UPLOAD_PRESET', 'cggpvdnv'),
)
